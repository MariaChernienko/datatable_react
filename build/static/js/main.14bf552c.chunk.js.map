{"version":3,"sources":["components/Pagination.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["Pagination","_ref","page","perPage","totalCount","onPageChange","pagesCount","Math","ceil","pages","Array","fill","map","_","i","react_default","a","createElement","p","key","className","onClick","Table","state","sortColumn","sortAsc","query","visibleQuery","allItemsChecked","handleQueryChange","event","_this","setState","target","value","updateQuery","debounce","handleHeaderClick","props","config","isSortable","sortItems","_ref2","items","sign","sortFn","b","localeCompare","Object","toConsumableArray","sort","filterItems","_ref3","queryRegexp","RegExp","filter","item","test","name","paginateItems","_ref4","start","end","slice","handleHeaderInput","status","checked","checkedItems","_ref5","handlePerPageChange","handlePageChange","handleCheckedStatus","id","handleButtonClick","_this2","this","_this$state","_this$props","sortedItems","filteredItems","paginatedItems","visibleItems","type","placeholder","onChange","entries","_ref6","_ref7","slicedToArray","concat","title","keys","render","components_Pagination","length","React","Component","peopleColConfig","checkbox","isSearchable","person","Link","to","born","age","died","sex","note","App","people","fetch","responce","json","objectSpread","components_Table","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14bf552c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Pagination = ({ page, perPage, totalCount, onPageChange }) => {\r\n  const pagesCount = Math.ceil(totalCount / perPage);\r\n  const pages = Array(pagesCount).fill(0).map((_, i) => i + 1);\r\n\r\n  return (\r\n    <div>\r\n      {pages.map(p => (\r\n        <button\r\n          key={p}\r\n          className={p === page ? 'Paginate-btn_active' : 'Paginate-btn'}\r\n          onClick={() => onPageChange(p)}\r\n        >\r\n          { p }\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;","import React from \"react\";\r\nimport Pagination from \"./Pagination.js\";\r\n\r\nimport debounce from \"lodash/debounce\";\r\n\r\nclass Table extends React.Component {\r\n  state = {\r\n    sortColumn: null,\r\n    sortAsc: true,\r\n    query: \"\",\r\n    visibleQuery: \"\",\r\n    perPage: 10,\r\n    page: 1,\r\n    allItemsChecked: false,\r\n  };\r\n\r\n  handleQueryChange = event => {\r\n    this.setState({\r\n      visibleQuery: event.target.value\r\n    });\r\n    this.updateQuery(event.target.value);\r\n  };\r\n\r\n  updateQuery = debounce(query => {\r\n    this.setState({\r\n      query,\r\n      page: 1\r\n    });\r\n  }, 500);\r\n\r\n  handleHeaderClick = (key) => {\r\n  \r\n    if (!this.props.config[key].isSortable) {\r\n      return;\r\n    }\r\n\r\n    this.setState(({ sortColumn, sortAsc }) => {\r\n      return {\r\n        sortColumn: key,\r\n        sortAsc: sortColumn === key ? !sortAsc : true\r\n      };\r\n    });\r\n  };\r\n\r\n  sortItems = ({ items, sortColumn, sortAsc }) => {\r\n    if (!sortColumn) {\r\n      return items;\r\n    }\r\n\r\n    const sign = sortAsc ? 1 : -1;\r\n    const sortFn =\r\n      typeof items[0][sortColumn] === \"number\"\r\n        ? (a, b) => sign * (a[sortColumn] - b[sortColumn])\r\n        : (a, b) => sign * a[sortColumn].localeCompare(b[sortColumn]);\r\n    return [...items].sort(sortFn);\r\n  };\r\n\r\n  filterItems = ({ items, query }) => {\r\n    const queryRegexp = new RegExp(query, \"i\");\r\n    return items.filter(item => queryRegexp.test(item.name));\r\n  };\r\n\r\n  paginateItems = ({ items, perPage, page }) => {\r\n    const start = (page - 1) * perPage;\r\n    const end = start + perPage;\r\n\r\n    return items.slice(start, end);\r\n  };\r\n\r\n  handleHeaderInput = ( status ) => {\r\n    const { items } = this.props;\r\n    items.map(item => item.checked = status)\r\n\r\n    this.setState({\r\n      items\r\n    });\r\n  }\r\n\r\n  checkedItems = ({ items }) => {\r\n    const { allItemsChecked } = this.state;\r\n\r\n    if(!allItemsChecked) {\r\n      return items;\r\n    } else {\r\n      return items.filter(item => item.checked);\r\n    }\r\n  }\r\n\r\n  handlePerPageChange = event => {\r\n    this.setState({\r\n      perPage: +event.target.value,\r\n      page: 1\r\n    });\r\n  };\r\n\r\n  handlePageChange = page => {\r\n    this.setState({ page });\r\n  };\r\n\r\n  handleCheckedStatus = (item, status) => {\r\n    const { items } = this.props;\r\n    items[item.id].checked = status;\r\n\r\n    this.setState({\r\n      items\r\n    });\r\n  }\r\n\r\n  handleButtonClick = () => {\r\n    const { allItemsChecked } = this.state;\r\n\r\n    this.setState({\r\n      allItemsChecked: !allItemsChecked,\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const {\r\n      page,\r\n      perPage,\r\n      query,\r\n      visibleQuery,\r\n      sortColumn,\r\n      sortAsc,\r\n      allItemsChecked,\r\n    } = this.state;\r\n  \r\n    const { items, config } = this.props;\r\n\r\n    const sortedItems = this.sortItems({\r\n      items,\r\n      sortColumn,\r\n      sortAsc\r\n    });\r\n\r\n    const filteredItems = this.filterItems({\r\n      items: sortedItems,\r\n      query\r\n    });\r\n\r\n    const paginatedItems = this.paginateItems({\r\n      items: filteredItems,\r\n      page,\r\n      perPage\r\n    });\r\n\r\n    const visibleItems = this.checkedItems({\r\n      items: paginatedItems,\r\n    });\r\n\r\n\r\n    return (\r\n      <div className=\"Table-App\">\r\n        <div className=\"Table-App_Menu\">\r\n          <h3>data table with some people</h3>\r\n          <div>\r\n            <button onClick={this.handleButtonClick}>\r\n              { allItemsChecked ? 'Show All' : 'Show checked' }\r\n            </button>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search\"\r\n              value={visibleQuery}\r\n              onChange={this.handleQueryChange}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <table className=\"Table-App_Table\">\r\n          <thead className=\"Table-App_Table-header\">\r\n            <tr>\r\n              {Object.entries(config).map(([key, value]) => (\r\n                <th\r\n                  key={key}\r\n                  className={`Table-cell dark-border ${config[key].isSortable ? \"sortable-column\" : \"\"}`}\r\n                  onClick={() => this.handleHeaderClick(key)}\r\n                >\r\n                  {key==='checkbox' ? <input type=\"checkbox\" value=\"\" onChange={(event) => this.handleHeaderInput(event.target.checked)}/> : value.title}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n            {visibleItems.map(item => (\r\n              <tr \r\n                key={item.id} \r\n                className=\"Table-App_Table-row\"\r\n              >\r\n                {Object.keys(config).map(key => (\r\n                  <td \r\n                    key={key} \r\n                    className=\"Table-cell\"\r\n                  >\r\n                    {key ==='checkbox' && <input type=\"checkbox\" checked={item.checked} onChange={(event) => this.handleCheckedStatus(item, event.target.checked)} />}\r\n                    {config[key].render ? config[key].render(item) : item[key]} \r\n                  </td>\r\n                ))}\r\n            </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n\r\n\r\n        <div className='Table-App_Footer'>\r\n          <div>\r\n            <h4>people per page:</h4>\r\n            <select className=\"Items-perpage\" onChange={this.handlePerPageChange} value={this.state.perPage}>\r\n              <option value=\"3\">3</option>\r\n              <option value=\"5\">5</option>\r\n              <option value=\"10\">10</option>\r\n              <option value=\"20\">20</option>\r\n              <option value=\"40\">40</option>\r\n            </select>\r\n          </div>\r\n\r\n          <Pagination\r\n            page={page}\r\n            perPage={perPage}\r\n            totalCount={filteredItems.length}\r\n            onPageChange={this.handlePageChange}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport Table from './components/Table.js';\r\n\r\nimport './App.css';\r\n\r\nconst peopleColConfig = {\r\n  checkbox: {\r\n    title: '',\r\n  },\r\n  name: {\r\n    title: 'Name', \r\n    isSortable: true, \r\n    isSearchable: true,\r\n    render: (person) => (\r\n      <Link to={`/people/${person.name}`}>{person.name}</Link>\r\n    )\r\n  },\r\n  born: {\r\n    title: 'Date of Birth',\r\n    isSortable: true, \r\n  },\r\n  age: {\r\n    title: \"Age\",\r\n    render: (person) => person.died - person.born,\r\n  },\r\n  sex: { \r\n    title: 'Gender',\r\n  },\r\n  note: {\r\n    title: 'Note',\r\n    render: () => <input />\r\n  }\r\n};\r\n\r\nclass App extends Component {\r\n  \r\n  state = {\r\n    people:[], \r\n    config: peopleColConfig,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const responce = await fetch('https://mate-academy.github.io/fe-program/js/tasks/people/people.json');\r\n    const people = await responce.json();\r\n     \r\n    this.setState({\r\n      people: people.map((person, id) => {\r\n        return { ...person, id: id, checked: false, note: \"\" };\r\n      }),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { people, config } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <Table items={people} config={config}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './App.css';\r\n\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>, \r\ndocument.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}