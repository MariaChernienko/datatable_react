{"version":3,"sources":["components/TableContext.js","components/Pagination.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableContext","React","createContext","Pagination","createBtns","n","btns","_loop","i","push","react_default","a","createElement","key","onClick","event","_this","props","onPageChanged","_this$props","this","totalRecords","perPage","countPages","Math","ceil","className","Component","TableHeader","_ref","config","handleHeaderClick","Object","entries","map","_ref2","_ref3","slicedToArray","value","isSortable","title","Cell","_ref4","item","column","render","components_TableContext","Consumer","handleItemInput","onKeyPress","Row","_ref5","keys","Table_Cell","TableContent","_ref6","items","Table_Row","name","Table","state","sortColumn","sortAsc","query","currentPeople","handleInputChange","setState","target","_ref7","id","note","blur","getSortedItems","_this$state","filter","toLowerCase","indexOf","sign","sortFn","b","localeCompare","sort","console","log","_this2","sortedItems","totalPeople","length","onChange","Table_TableHeader","Provider","Table_TableContent","components_Pagination","peopleColConfig","checkbox","type","isSearchable","person","Link","to","concat","born","age","died","sex","defaultValue","App","people","fetch","responce","json","objectSpread","components_Table","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56057836.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TableContext = React.createContext(\r\n  () => {}\r\n);\r\n\r\nexport default TableContext;","import React from 'react';\r\n\r\nclass Pagination extends React.Component {\r\n\r\n  createBtns = (n) => {\r\n    let btns = []\r\n    for (let i = 1; i <= n; i++) {\r\n      btns.push(<span key={i}><button onClick={(event) => this.props.onPageChanged(event, i)}>{i}</button></span>)\r\n    }\r\n    return btns;\r\n  };\r\n\r\n\r\n  render() {\r\n    const { totalRecords, perPage } = this.props;\r\n   \r\n    const countPages = (Math.ceil(totalRecords/10)) / perPage * 10;\r\n\r\n    return (\r\n      <div className=\"Pagination\">\r\n        {this.createBtns(countPages)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Pagination;","import React from \"react\";\r\nimport TableContext from './TableContext.js';\r\nimport Pagination from './Pagination.js';\r\n\r\n// import debounce from 'lodash.debounce';\r\n\r\nconst TableHeader = ({ config, handleHeaderClick }) => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {Object.entries(config).map(([key, value]) => (\r\n          <th key={key} className={config[key].isSortable ? 'sortable-column' : ''}\r\n            onClick={() => handleHeaderClick(key)}\r\n          >\r\n            {value.title}\r\n          </th>\r\n        ))}\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\n\r\nconst Cell = ({ item, column, render }) => (\r\n\r\n  <TableContext.Consumer>\r\n    {handleItemInput => (\r\n      <td onKeyPress={(event) => handleItemInput(event, item)}>\r\n        {render ? render(item) : item[column]}\r\n      </td>\r\n    )}\r\n  </TableContext.Consumer>\r\n);\r\n\r\nconst Row = ({ item, config }) => (\r\n  <tr>\r\n    {Object.keys(config).map(key => (\r\n      <Cell key={key} item={item} column={key} render={config[key].render} />\r\n    ))}\r\n  </tr>\r\n);\r\n\r\nconst TableContent = ({ items, config }) => {\r\n  return (\r\n    <tbody>\r\n      {items.map(item => (\r\n        <Row key={item.name} item={item} config={config} />\r\n      ))}\r\n    </tbody>\r\n  );\r\n};\r\n\r\n\r\nclass Table extends React.Component {\r\n  state = {\r\n    sortColumn: null,\r\n    sortAsc: true,\r\n    query: '',\r\n    currentPeople: [],\r\n    // currentPage: null,\r\n    // totalPages: null,\r\n    perPage: 10,\r\n  };\r\n\r\n\r\n  handleInputChange = (event) => {\r\n    this.setState({\r\n      query: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleHeaderClick = (key) => {\r\n    if(!this.props.config[key].isSortable) {\r\n      return;\r\n    }\r\n  \r\n    this.setState(({ sortColumn, sortAsc }) => {\r\n      return {\r\n        sortColumn: key,\r\n        sortAsc: sortColumn === key ? !sortAsc : true,\r\n      }\r\n    });\r\n  };\r\n\r\n  handleItemInput = (event, item) => {\r\n    const { items } = this.props;\r\n    items[item.id].note = event.target.value;\r\n\r\n    if(event.key === \"Enter\") {\r\n      event.target.blur();\r\n    }\r\n  };\r\n\r\n  getSortedItems = () => {\r\n    const { sortColumn, sortAsc, query } = this.state;\r\n    const { items } = this.props;\r\n\r\n    if(!sortColumn) {\r\n      return items.filter(item => item.name.toLowerCase().indexOf(query.toLowerCase()) > -1);\r\n    }\r\n\r\n    const sign = sortAsc ? 1 : -1;\r\n    const sortFn = typeof items[0][sortColumn] === 'number'\r\n      ? (a, b) => sign * (a[sortColumn] - b[sortColumn])\r\n      : (a, b) => sign * a[sortColumn].localeCompare(b[sortColumn])\r\n    ;\r\n    return items.sort(sortFn).filter(item => item.name.toLowerCase().indexOf(query.toLowerCase()) > -1);\r\n  };\r\n\r\n  onPageChanged = (event, i) => {\r\n    console.log(event, i);\r\n\r\n    const { items } = this.props;\r\n    const { perPage} = this.state;\r\n\r\n    console.log(items.filter(item => item.id > i * perPage));\r\n    return items.filter(item => item.id > i * perPage);\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n \r\n\r\n  render() {\r\n    const { config } = this.props;\r\n    // const { currentPeople, currentPage, totalPages} = this.state;\r\n    const { perPage } = this.state;\r\n    const sortedItems =  this.getSortedItems();\r\n    const totalPeople = sortedItems.length;\r\n    \r\n\r\n    return (\r\n      <div className=\"Table\">\r\n        <input onChange={(event) => this.handleInputChange(event)}/>\r\n        <table>\r\n          <TableHeader config={config} handleHeaderClick={this.handleHeaderClick}/>\r\n\r\n          <TableContext.Provider value={this.handleItemInput}>\r\n            <TableContent items={sortedItems} config={config} />\r\n          </TableContext.Provider>\r\n        </table>\r\n        <Pagination \r\n          totalRecords={totalPeople}\r\n          perPage={perPage}\r\n          onPageChanged={this.onPageChanged} \r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport Table from './components/Table.js';\n\nimport './App.css';\n\nconst peopleColConfig = {\n  checkbox: {\n    title: '',\n    render: () => (\n      <input type=\"checkbox\" />\n    )\n  },\n  name: {\n    title: 'Имя', \n    isSortable: true, \n    isSearchable: true,\n    render: (person) => (\n      <Link to={`/people/${person.name}`}>{person.name}</Link>\n    )\n  },\n  born: {\n    title: 'Год рождения',\n    isSortable: true, \n  },\n  age: {\n    title: \"Возраст\",\n    render: (person) => person.died - person.born,\n  },\n  sex: { \n    title: 'Пол',\n  },\n  note: {\n    title: 'Заметка',\n    render: (person) => <input defaultValue={person.note}/>\n  }\n};\n\nclass App extends Component {\n  \n  state = {\n    people:[], \n    config: peopleColConfig,\n  };\n\n  async componentDidMount() {\n    const responce = await fetch('https://mate-academy.github.io/fe-program/js/tasks/people/people.json');\n    const people = await responce.json();\n     \n    this.setState({\n      people: people.map((person, id) => {\n        return { ...person, id: id };\n      }),\n    });\n  }\n\n  render() {\n    const { people, config } = this.state;\n    return (\n      <div className=\"App\">\n        <Table items={people} config={config}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>, \ndocument.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}